{"ast":null,"code":"// composite\n\n/**\n * Composite images together using the `composite` command in graphicsmagick.\n *\n * gm('/path/to/image.jpg')\n * .composite('/path/to/second_image.jpg')\n * .geometry('+100+150')\n * .write('/path/to/composite.png', function(err) {\n *   if(!err) console.log(\"Written composite image.\");\n * });\n *\n * @param {String} other  Path to the image that contains the changes.\n * @param {String} [mask] Path to the image with opacity informtion. Grayscale.\n */\nmodule.exports = exports = function (proto) {\n  proto.composite = function (other, mask) {\n    this.in(other); // If the mask is defined, add it to the output.\n\n    if (typeof mask !== \"undefined\") this.out(mask);\n    this.subCommand(\"composite\");\n    return this;\n  };\n};","map":{"version":3,"sources":["/home/a/Documents/GitHub/react-ts-project/node_modules/gm/lib/composite.js"],"names":["module","exports","proto","composite","other","mask","in","out","subCommand"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAG,UAASC,KAAT,EAAgB;AACvCA,EAAAA,KAAK,CAACC,SAAN,GAAkB,UAASC,KAAT,EAAgBC,IAAhB,EAAsB;AACpC,SAAKC,EAAL,CAAQF,KAAR,EADoC,CAGpC;;AACA,QAAG,OAAOC,IAAP,KAAgB,WAAnB,EACI,KAAKE,GAAL,CAASF,IAAT;AAEJ,SAAKG,UAAL,CAAgB,WAAhB;AAEA,WAAO,IAAP;AACH,GAVD;AAWH,CAZD","sourcesContent":["// composite\n\n/**\n * Composite images together using the `composite` command in graphicsmagick.\n *\n * gm('/path/to/image.jpg')\n * .composite('/path/to/second_image.jpg')\n * .geometry('+100+150')\n * .write('/path/to/composite.png', function(err) {\n *   if(!err) console.log(\"Written composite image.\");\n * });\n *\n * @param {String} other  Path to the image that contains the changes.\n * @param {String} [mask] Path to the image with opacity informtion. Grayscale.\n */\n\nmodule.exports = exports = function(proto) {\n    proto.composite = function(other, mask) {\n        this.in(other);\n\n        // If the mask is defined, add it to the output.\n        if(typeof mask !== \"undefined\")\n            this.out(mask);\n\n        this.subCommand(\"composite\");\n\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}