{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar fs = require('fs');\n\nvar parallel = require('array-parallel');\n/**\n * Extend proto.\n */\n\n\nmodule.exports = function (proto) {\n  /**\n   * Do nothing.\n   */\n  function noop() {} // http://www.graphicsmagick.org/GraphicsMagick.html#details-morph\n\n\n  proto.morph = function morph(other, outname, callback) {\n    if (!outname) {\n      throw new Error(\"an output filename is required\");\n    }\n\n    callback = (callback || noop).bind(this);\n    var self = this;\n\n    if (Array.isArray(other)) {\n      other.forEach(function (img) {\n        self.out(img);\n      });\n      self.out(\"-morph\", other.length);\n    } else {\n      self.out(other, \"-morph\", 1);\n    }\n\n    self.write(outname, function (err, stdout, stderr, cmd) {\n      if (err) return callback(err, stdout, stderr, cmd); // Apparently some platforms create the following temporary files.\n      // Check if the output file exists, if it doesn't, then\n      // work with temporary files.\n\n      fs.exists(outname, function (exists) {\n        if (exists) return callback(null, stdout, stderr, cmd);\n        parallel([fs.unlink.bind(fs, outname + '.0'), fs.unlink.bind(fs, outname + '.2'), fs.rename.bind(fs, outname + '.1', outname)], function (err) {\n          callback(err, stdout, stderr, cmd);\n        });\n      });\n    });\n    return self;\n  };\n};","map":{"version":3,"sources":["/home/a/Documents/GitHub/react-ts-project/node_modules/gm/lib/convenience/morph.js"],"names":["fs","require","parallel","module","exports","proto","noop","morph","other","outname","callback","Error","bind","self","Array","isArray","forEach","img","out","length","write","err","stdout","stderr","cmd","exists","unlink","rename"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,gBAAD,CAAtB;AAEA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAEhC;AACF;AACA;AAEE,WAASC,IAAT,GAAiB,CAAE,CANa,CAQhC;;;AACAD,EAAAA,KAAK,CAACE,KAAN,GAAc,SAASA,KAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgCC,QAAhC,EAA0C;AACtD,QAAI,CAACD,OAAL,EAAc;AACZ,YAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAEDD,IAAAA,QAAQ,GAAG,CAACA,QAAQ,IAAIJ,IAAb,EAAmBM,IAAnB,CAAwB,IAAxB,CAAX;AAEA,QAAIC,IAAI,GAAG,IAAX;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAJ,EAA0B;AACxBA,MAAAA,KAAK,CAACQ,OAAN,CAAc,UAAUC,GAAV,EAAe;AAC3BJ,QAAAA,IAAI,CAACK,GAAL,CAASD,GAAT;AACD,OAFD;AAGAJ,MAAAA,IAAI,CAACK,GAAL,CAAS,QAAT,EAAmBV,KAAK,CAACW,MAAzB;AACD,KALD,MAKO;AACLN,MAAAA,IAAI,CAACK,GAAL,CAASV,KAAT,EAAgB,QAAhB,EAA0B,CAA1B;AACD;;AAEDK,IAAAA,IAAI,CAACO,KAAL,CAAWX,OAAX,EAAoB,UAAUY,GAAV,EAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,GAA/B,EAAoC;AACtD,UAAIH,GAAJ,EAAS,OAAOX,QAAQ,CAACW,GAAD,EAAMC,MAAN,EAAcC,MAAd,EAAsBC,GAAtB,CAAf,CAD6C,CAGtD;AACA;AACA;;AACAxB,MAAAA,EAAE,CAACyB,MAAH,CAAUhB,OAAV,EAAmB,UAAUgB,MAAV,EAAkB;AACnC,YAAIA,MAAJ,EAAY,OAAOf,QAAQ,CAAC,IAAD,EAAOY,MAAP,EAAeC,MAAf,EAAuBC,GAAvB,CAAf;AAEZtB,QAAAA,QAAQ,CAAC,CACPF,EAAE,CAAC0B,MAAH,CAAUd,IAAV,CAAeZ,EAAf,EAAmBS,OAAO,GAAG,IAA7B,CADO,EAEPT,EAAE,CAAC0B,MAAH,CAAUd,IAAV,CAAeZ,EAAf,EAAmBS,OAAO,GAAG,IAA7B,CAFO,EAGPT,EAAE,CAAC2B,MAAH,CAAUf,IAAV,CAAeZ,EAAf,EAAmBS,OAAO,GAAG,IAA7B,EAAmCA,OAAnC,CAHO,CAAD,EAIL,UAAUY,GAAV,EAAe;AAChBX,UAAAA,QAAQ,CAACW,GAAD,EAAMC,MAAN,EAAcC,MAAd,EAAsBC,GAAtB,CAAR;AACD,SANO,CAAR;AAOD,OAVD;AAWD,KAjBD;AAmBA,WAAOX,IAAP;AACD,GAtCD;AAuCD,CAhDD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs');\nvar parallel = require('array-parallel');\n\n/**\n * Extend proto.\n */\n\nmodule.exports = function (proto) {\n\n  /**\n   * Do nothing.\n   */\n\n  function noop () {}\n\n  // http://www.graphicsmagick.org/GraphicsMagick.html#details-morph\n  proto.morph = function morph (other, outname, callback) {\n    if (!outname) {\n      throw new Error(\"an output filename is required\");\n    }\n\n    callback = (callback || noop).bind(this)\n\n    var self = this;\n\n    if (Array.isArray(other)) {\n      other.forEach(function (img) {\n        self.out(img);\n      });\n      self.out(\"-morph\", other.length);\n    } else {\n      self.out(other, \"-morph\", 1);\n    }\n\n    self.write(outname, function (err, stdout, stderr, cmd) {\n      if (err) return callback(err, stdout, stderr, cmd);\n\n      // Apparently some platforms create the following temporary files.\n      // Check if the output file exists, if it doesn't, then\n      // work with temporary files.\n      fs.exists(outname, function (exists) {\n        if (exists) return callback(null, stdout, stderr, cmd);\n\n        parallel([\n          fs.unlink.bind(fs, outname + '.0'),\n          fs.unlink.bind(fs, outname + '.2'),\n          fs.rename.bind(fs, outname + '.1', outname)\n        ], function (err) {\n          callback(err, stdout, stderr, cmd);\n        })\n      })\n    });\n\n    return self;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}