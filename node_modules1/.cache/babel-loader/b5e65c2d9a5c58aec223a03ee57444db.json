{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/a/Documents/GitHub/react-ts-project/src/Croper.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport Cropper from 'react-easy-crop';\nimport Slider from 'react-easy-crop';\n\nconst Croper = props => {\n  _s();\n\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  const [values, setValues] = useState({\n    crop: {\n      x: 0,\n      y: 0\n    },\n    zoom: zoom,\n    aspect: 16 / 9\n  });\n\n  const onCropChange = crop => {\n    setState({\n      crop\n    });\n  };\n\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    console.log(croppedArea, croppedAreaPixels);\n  }, []);\n\n  const onZoomChange = zoom => {\n    setState({\n      zoom\n    });\n  };\n\n  console.log(state, state.crop);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cropContainer\",\n    children: [\"hello\", /*#__PURE__*/_jsxDEV(Cropper, {\n      image: props.image,\n      crop: state.crop,\n      zoom: state.zoom,\n      aspect: state.aspect,\n      onCropChange: onCropChange,\n      onCropComplete: onCropComplete,\n      onZoomChange: onZoomChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      value: zoom,\n      min: 1,\n      max: 3,\n      step: 0.1,\n      \"aria-labelledby\": \"Zoom\",\n      onChange: (e, zoom) => setZoom(zoom),\n      classes: {\n        container: 'slider'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 11\n  }, this);\n};\n\n_s(Croper, \"Af4djUSnFKxlV1DHQGOBCQDLEj8=\");\n\n_c = Croper;\nexport default Croper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Croper\");","map":{"version":3,"sources":["/home/a/Documents/GitHub/react-ts-project/src/Croper.jsx"],"names":["React","useState","useCallback","Cropper","Slider","Croper","props","crop","setCrop","x","y","zoom","setZoom","values","setValues","aspect","onCropChange","setState","onCropComplete","croppedArea","croppedAreaPixels","console","log","onZoomChange","state","image","e","container"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,WAAzB,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC;AAACQ,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GAAD,CAAhC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC;AACnCM,IAAAA,IAAI,EAAE;AACJE,MAAAA,CAAC,EAAE,CADC;AAEJC,MAAAA,CAAC,EAAE;AAFC,KAD6B;AAKnCC,IAAAA,IAAI,EAAEA,IAL6B;AAMnCI,IAAAA,MAAM,EAAE,KAAK;AANsB,GAAD,CAApC;;AASA,QAAMC,YAAY,GAAIT,IAAD,IAAU;AAC7BU,IAAAA,QAAQ,CAAC;AAACV,MAAAA;AAAD,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMW,cAAc,GAAGhB,WAAW,CAAC,CAACiB,WAAD,EAAcC,iBAAd,KAAoC;AACrEC,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ,EAAyBC,iBAAzB;AACD,GAFiC,EAE/B,EAF+B,CAAlC;;AAIA,QAAMG,YAAY,GAAIZ,IAAD,IAAU;AAC7BM,IAAAA,QAAQ,CAAC;AAACN,MAAAA;AAAD,KAAD,CAAR;AACD,GAFD;;AAGAU,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ,EAAmBA,KAAK,CAACjB,IAAzB;AACA,sBAAQ;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,qCAEN,QAAC,OAAD;AAAS,MAAA,KAAK,EAAED,KAAK,CAACmB,KAAtB;AAA6B,MAAA,IAAI,EAAED,KAAK,CAACjB,IAAzC;AAA+C,MAAA,IAAI,EAAEiB,KAAK,CAACb,IAA3D;AAAiE,MAAA,MAAM,EAAEa,KAAK,CAACT,MAA/E;AAAuF,MAAA,YAAY,EAAEC,YAArG;AAAmH,MAAA,cAAc,EAAEE,cAAnI;AAAmJ,MAAA,YAAY,EAAEK;AAAjK;AAAA;AAAA;AAAA;AAAA,YAFM,eAGN,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEZ,IAAf;AAAqB,MAAA,GAAG,EAAE,CAA1B;AAA6B,MAAA,GAAG,EAAE,CAAlC;AAAqC,MAAA,IAAI,EAAE,GAA3C;AAAgD,yBAAgB,MAAhE;AAAuE,MAAA,QAAQ,EAAE,CAACe,CAAD,EAAIf,IAAJ,KAAaC,OAAO,CAACD,IAAD,CAArG;AAA6G,MAAA,OAAO,EAAE;AAClHgB,QAAAA,SAAS,EAAE;AADuG;AAAtH;AAAA;AAAA;AAAA;AAAA,YAHM;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAOD,CA/BD;;GAAMtB,M;;KAAAA,M;AAiCN,eAAeA,MAAf","sourcesContent":["import React, {useState, useCallback} from 'react'\nimport Cropper from 'react-easy-crop'\nimport Slider from 'react-easy-crop'\n\nconst Croper = (props) => {\n  const [crop, setCrop] = useState({x: 0, y: 0})\n  const [zoom, setZoom] = useState(1)\n  const [values, setValues] = useState({\n    crop: {\n      x: 0,\n      y: 0\n    },\n    zoom: zoom,\n    aspect: 16 / 9\n  })\n\n  const onCropChange = (crop) => {\n    setState({crop})\n  }\n\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    console.log(croppedArea, croppedAreaPixels)\n  }, [])\n\n  const onZoomChange = (zoom) => {\n    setState({zoom})\n  }\n  console.log(state, state.crop)\n  return (<div className=\"cropContainer\">\n    hello\n    <Cropper image={props.image} crop={state.crop} zoom={state.zoom} aspect={state.aspect} onCropChange={onCropChange} onCropComplete={onCropComplete} onZoomChange={onZoomChange}/>\n    <Slider value={zoom} min={1} max={3} step={0.1} aria-labelledby=\"Zoom\" onChange={(e, zoom) => setZoom(zoom)} classes={{\n        container: 'slider'\n      }}/>\n  </div>)\n}\n\nexport default Croper\n"]},"metadata":{},"sourceType":"module"}