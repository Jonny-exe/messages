{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/a/Documents/GitHub/react-ts-project/src/ImageCrop.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nconst ImageCrop = () => {\n  _s();\n\n  const [state, setState] = useState({\n    src: null,\n    crop: {\n      unit: '%',\n      width: 30,\n      aspect: 1 / 1\n    }\n  });\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setState({\n        src: reader.result\n      }));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onImageLoaded = image => {\n    imageRef = image;\n  };\n\n  const onCropComplete = crop => {\n    makeClientCrop(crop);\n  };\n\n  const onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // setState({ crop: percentCrop });\n    setState({\n      crop\n    });\n  };\n\n  const makeClientCrop = async crop => {\n    if (imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await getCroppedImg(imageRef, crop, 'newFile.jpeg');\n      setState({\n        croppedImageUrl\n      });\n    }\n  };\n\n  const getCroppedImg = (image, crop, fileName) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(fileUrl);\n        fileUrl = window.URL.createObjectURL(blob);\n        resolve(fileUrl);\n      }, 'image/jpeg');\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: onSelectFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this), src && /*#__PURE__*/_jsxDEV(ReactCrop, {\n      src: src,\n      crop: crop,\n      ruleOfThirds: \"ruleOfThirds\",\n      onImageLoaded: onImageLoaded,\n      onComplete: onCropComplete,\n      onChange: onCropChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 14\n    }, this), croppedImageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"Crop\",\n      style: {\n        maxWidth: '100%'\n      },\n      src: croppedImageUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 11\n  }, this);\n};\n\n_s(ImageCrop, \"Z+NeUmlPRSBfr6rVSvkimGtI4F8=\");\n\n_c = ImageCrop;\nexport default ImageCrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageCrop\");","map":{"version":3,"sources":["/home/a/Documents/GitHub/react-ts-project/src/ImageCrop.jsx"],"names":["React","useState","ReactCrop","ImageCrop","state","setState","src","crop","unit","width","aspect","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","height","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","maxWidth"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nconst ImageCrop = () => {\n  const [state, setState] = useState({\n    src: null,\n    crop: {\n      unit: '%',\n      width: 30,\n      aspect: 1 / 1\n    }\n  })\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setState({src: reader.result}));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onImageLoaded = image => {\n    imageRef = image;\n  };\n\n  const onCropComplete = crop => {\n    makeClientCrop(crop);\n  };\n\n  const onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // setState({ crop: percentCrop });\n    setState({crop});\n  };\n\n  const makeClientCrop =  async (crop) => {\n    if (imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await getCroppedImg(imageRef, crop, 'newFile.jpeg');\n      setState({croppedImageUrl});\n    }\n  }\n\n  const getCroppedImg = (image, crop, fileName) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(fileUrl);\n        fileUrl = window.URL.createObjectURL(blob);\n        resolve(fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  return (<div>\n    <div>\n      <input type=\"file\" accept=\"image/*\" onChange={onSelectFile}/>\n    </div>\n    {src && (<ReactCrop src={src} crop={crop} ruleOfThirds=\"ruleOfThirds\" onImageLoaded={onImageLoaded} onComplete={onCropComplete} onChange={onCropChange}/>)}\n    {\n      croppedImageUrl && (<img alt=\"Crop\" style={{\n          maxWidth: '100%'\n        }} src={croppedImageUrl}/>)\n    }\n  </div>)\n\n}\n\nexport default ImageCrop\n"]},"metadata":{},"sourceType":"module"}