{"ast":null,"code":"// compare\nvar spawn = require('cross-spawn');\n/**\n * Compare two images uses graphicsmagicks `compare` command.\n *\n * gm.compare(img1, img2, 0.4, function (err, equal, equality) {\n *   if (err) return handle(err);\n *   console.log('The images are equal: %s', equal);\n *   console.log('There equality was %d', equality);\n * });\n *\n * @param {String} orig Path to an image.\n * @param {String} compareTo Path to another image to compare to `orig`.\n * @param {Number|Object} [options] Options object or the amount of difference to tolerate before failing - defaults to 0.4\n * @param {Function} cb(err, Boolean, equality, rawOutput)\n */\n\n\nmodule.exports = exports = function (proto) {\n  function compare(orig, compareTo, options, cb) {\n    var isImageMagick = this._options && this._options.imageMagick;\n    var appPath = this._options && this._options.appPath || '';\n    var bin = isImageMagick ? appPath + 'compare' : appPath + 'gm';\n    var args = ['-metric', 'mse', orig, compareTo];\n\n    if (!isImageMagick) {\n      args.unshift('compare');\n    }\n\n    var tolerance = 0.4; // outputting the diff image\n\n    if (typeof options === 'object') {\n      if (options.highlightColor && options.highlightColor.indexOf('\"') < 0) {\n        options.highlightColor = '\"' + options.highlightColor + '\"';\n      }\n\n      if (options.file) {\n        if (typeof options.file !== 'string') {\n          throw new TypeError('The path for the diff output is invalid');\n        } // graphicsmagick defaults to red\n\n\n        if (options.highlightColor) {\n          args.push('-highlight-color');\n          args.push(options.highlightColor);\n        }\n\n        if (options.highlightStyle) {\n          args.push('-highlight-style');\n          args.push(options.highlightStyle);\n        } // For IM, filename is the last argument. For GM it's `-file <filename>`\n\n\n        if (!isImageMagick) {\n          args.push('-file');\n        }\n\n        args.push(options.file);\n      }\n\n      if (typeof options.tolerance != 'undefined') {\n        if (typeof options.tolerance !== 'number') {\n          throw new TypeError('The tolerance value should be a number');\n        }\n\n        tolerance = options.tolerance;\n      }\n    } else {\n      // For ImageMagick diff file is required but we don't care about it, so null it out\n      if (isImageMagick) {\n        args.push('null:');\n      }\n\n      if (typeof options == 'function') {\n        cb = options; // tolerance value not provided, flip the cb place\n      } else {\n        tolerance = options;\n      }\n    }\n\n    var proc = spawn(bin, args);\n    var stdout = '';\n    var stderr = '';\n    proc.stdout.on('data', function (data) {\n      stdout += data;\n    });\n    proc.stderr.on('data', function (data) {\n      stderr += data;\n    });\n    proc.on('close', function (code) {\n      // ImageMagick returns err code 2 if err, 0 if similar, 1 if dissimilar\n      if (isImageMagick) {\n        if (code === 0) {\n          return cb(null, 0 <= tolerance, 0, stdout);\n        } else if (code === 1) {\n          err = null;\n          stdout = stderr;\n        } else {\n          return cb(stderr);\n        }\n      } else {\n        if (code !== 0) {\n          return cb(stderr);\n        }\n      } // Since ImageMagick similar gives err code 0 and no stdout, there's really no matching\n      // Otherwise, output format for IM is `12.00 (0.123)` and for GM it's `Total: 0.123`\n\n\n      var regex = isImageMagick ? /\\((\\d+\\.?[\\d\\-\\+e]*)\\)/m : /Total: (\\d+\\.?\\d*)/m;\n      var match = regex.exec(stdout);\n\n      if (!match) {\n        err = new Error('Unable to parse output.\\nGot ' + stdout);\n        return cb(err);\n      }\n\n      var equality = parseFloat(match[1]);\n      cb(null, equality <= tolerance, equality, stdout, orig, compareTo);\n    });\n  }\n\n  if (proto) {\n    proto.compare = compare;\n  }\n\n  return compare;\n};","map":{"version":3,"sources":["/home/a/Documents/GitHub/react-ts-project/node_modules/gm/lib/compare.js"],"names":["spawn","require","module","exports","proto","compare","orig","compareTo","options","cb","isImageMagick","_options","imageMagick","appPath","bin","args","unshift","tolerance","highlightColor","indexOf","file","TypeError","push","highlightStyle","proc","stdout","stderr","on","data","code","err","regex","match","exec","Error","equality","parseFloat"],"mappings":"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","sourcesContent":["// compare\n\nvar spawn = require('cross-spawn');\n\n/**\n * Compare two images uses graphicsmagicks `compare` command.\n *\n * gm.compare(img1, img2, 0.4, function (err, equal, equality) {\n *   if (err) return handle(err);\n *   console.log('The images are equal: %s', equal);\n *   console.log('There equality was %d', equality);\n * });\n *\n * @param {String} orig Path to an image.\n * @param {String} compareTo Path to another image to compare to `orig`.\n * @param {Number|Object} [options] Options object or the amount of difference to tolerate before failing - defaults to 0.4\n * @param {Function} cb(err, Boolean, equality, rawOutput)\n */\n\nmodule.exports = exports = function (proto) {\n  function compare(orig, compareTo, options, cb) {\n\n    var isImageMagick = this._options && this._options.imageMagick;\n    var appPath = this._options && this._options.appPath || '';\n    var bin = isImageMagick\n      ? appPath + 'compare' \n      : appPath + 'gm'\n    var args = ['-metric', 'mse', orig, compareTo]\n    if (!isImageMagick) {\n        args.unshift('compare');\n    }\n    var tolerance = 0.4;\n    // outputting the diff image\n    if (typeof options === 'object') {\n\n      if (options.highlightColor && options.highlightColor.indexOf('\"') < 0) {\n        options.highlightColor = '\"' + options.highlightColor + '\"';\n      }\n\n      if (options.file) {\n        if (typeof options.file !== 'string') {\n          throw new TypeError('The path for the diff output is invalid');\n        }\n         // graphicsmagick defaults to red\n        if (options.highlightColor) {\n            args.push('-highlight-color');\n            args.push(options.highlightColor);\n        }\n        if (options.highlightStyle) {\n            args.push('-highlight-style')\n            args.push(options.highlightStyle)\n        }\n        // For IM, filename is the last argument. For GM it's `-file <filename>`\n        if (!isImageMagick) {\n            args.push('-file');\n        }\n        args.push(options.file);\n      }\n      \n      if (typeof options.tolerance != 'undefined') {\n        if (typeof options.tolerance !== 'number') {\n          throw new TypeError('The tolerance value should be a number');\n        }\n        tolerance = options.tolerance;\n      } \n    } else {\n      // For ImageMagick diff file is required but we don't care about it, so null it out\n      if (isImageMagick) {\n        args.push('null:');\n      }\n\n      if (typeof options == 'function') {\n        cb = options; // tolerance value not provided, flip the cb place\n      } else {\n        tolerance = options\n      }\n    }\n\n    var proc = spawn(bin, args);\n    var stdout = '';\n    var stderr = '';\n    proc.stdout.on('data',function(data) { stdout+=data });\n    proc.stderr.on('data',function(data) { stderr+=data });\n    proc.on('close', function (code) {\n      // ImageMagick returns err code 2 if err, 0 if similar, 1 if dissimilar\n      if (isImageMagick) {\n        if (code === 0) {\n          return cb(null, 0 <= tolerance, 0, stdout);\n        }\n        else if (code === 1) {\n          err = null;\n          stdout = stderr;\n        } else {\n        return cb(stderr);\n        }\n      } else {\n        if(code !== 0) {\n          return cb(stderr);\n        }\n      }\n      // Since ImageMagick similar gives err code 0 and no stdout, there's really no matching\n      // Otherwise, output format for IM is `12.00 (0.123)` and for GM it's `Total: 0.123`\n      var regex = isImageMagick ? /\\((\\d+\\.?[\\d\\-\\+e]*)\\)/m : /Total: (\\d+\\.?\\d*)/m;\n      var match = regex.exec(stdout);\n      if (!match) {\n        err = new Error('Unable to parse output.\\nGot ' + stdout);\n        return cb(err);\n      }\n\n      var equality = parseFloat(match[1]);\n      cb(null, equality <= tolerance, equality, stdout, orig, compareTo);\n    });\n  }\n\n  if (proto) {\n    proto.compare = compare;\n  }\n  return compare;\n};\n\n"]},"metadata":{},"sourceType":"script"}