{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nconst url = 'http://192.168.0.16:5000/';\nconst headersContent = {// \"Access-Control-Allow-Credentials\": \"true\",\n  // \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n  // \"Access-Control-Allow-Methods\": \"POST, GET, OPTIONS, DELETE, PUT\",\n  // \"Access-Control-Max-Age\": \"1000\",\n  // \"Access-Control-Allow-Headers\": \"x-requested-with, Content-Type, origin, authorization, accept, client-security-token\",\n  // \"Content-Type\": \"application/json\"\n};\nexport const PostRequest = (userContent, reciverContent, textContent) => {\n  console.log(\"This is the texxt content: \" + textContent);\n  var bodyContent = {\n    sender: userContent,\n    receiver: reciverContent,\n    content: textContent\n  };\n  fetch(url + \"addmessage\", {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(res => res.json()).then(resJson => {\n    console.log(\"PostRequest: \", resJson);\n    return resJson;\n  });\n};\n_c = PostRequest;\nexport const UploadProfileImage = (user, image, areaToCrop) => {\n  const bodyContent = {\n    name: user,\n    image: image,\n    areatocrop: areaToCrop\n  };\n  console.log(\"UploadProfileImage\", bodyContent);\n  fetch(url + \"uploadprofileimage\", {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(res => res.json()).then(resJson => {\n    console.log(\"PostRequest: \", resJson);\n    return resJson;\n  });\n};\n_c2 = UploadProfileImage;\nexport const GetProfileImage = user => {\n  _s();\n\n  const [state, setState] = useState({\n    picture: null,\n    loading: true\n  });\n  useEffect(() => {\n    var bodyContent = {\n      name: user\n    };\n    console.log(\"GetProfileImage: bodyContent: \", bodyContent);\n    setState(state => ({\n      picture: state.picture,\n      loading: true\n    }));\n    fetch(url + \"getprofileimage\", {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"GetProfileImage: json data: \", json);\n      setState({\n        picture: json,\n        loading: false\n      });\n    });\n  }, [user]);\n  return state;\n};\n\n_s(GetProfileImage, \"6OzxFYP8QZ8le1D9tVWiOBwxSFU=\");\n\n_c3 = GetProfileImage;\nexport const UserLogin = (finalUser, finalPassword) => {\n  _s2();\n\n  const [state, setState] = useState({\n    successfulLogin: null,\n    loginLoading: true\n  });\n  const url = 'http://192.168.0.16:5000/login';\n  useEffect(() => {\n    var bodyContent = {\n      name: finalUser,\n      pass: finalPassword\n    };\n    console.log(\"Login: bodyContent: \", bodyContent);\n    setState(state => ({\n      successfulLogin: state.successfulLogin,\n      loginLoading: true\n    }));\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"UserLogin: json data\", json);\n\n      if (json != null) {\n        console.log(\"UserLogin: json set\");\n        setState({\n          successfulLogin: json,\n          loginLoading: false\n        });\n      }\n    });\n  }, [finalPassword]);\n  return state;\n};\n\n_s2(UserLogin, \"KatCxqI/ZwHefszhEVAYl9RVoAU=\");\n\n_c4 = UserLogin;\nexport const DoesUserExist = newUser => {\n  _s3();\n\n  const url = 'http://192.168.0.16:5000/doesuserexist';\n  const [state, setState] = useState({\n    doesUserExist: null,\n    registerLoading: true\n  });\n  useEffect(() => {\n    var bodyContent = {\n      name: newUser\n    };\n    console.log(\"DoesUserExist: bodyContent: \", bodyContent, newUser);\n    setState(state => ({\n      doesUserExist: state.doesUserExist,\n      registerLoading: true\n    }));\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"DoesUserExist: json data\", json, newUser);\n      setState({\n        doesUserExist: json,\n        registerLoading: false\n      });\n    });\n  }, [newUser]);\n  return state;\n};\n\n_s3(DoesUserExist, \"R1L5vXZa2LLLeMYTGt1wn8AyrfI=\");\n\n_c5 = DoesUserExist;\nexport const GetFriendRequests = user => {\n  _s4();\n\n  const url = 'http://localhost:5000/getfriendrequests';\n  const [state, setState] = useState({\n    requests: null,\n    loading: true\n  });\n  useEffect(() => {\n    var bodyContent = {\n      name: user\n    };\n    console.log(\"GetFriendRequests: bodyContent: \", bodyContent);\n    setState(state => ({\n      requests: state.requests,\n      loading: true\n    }));\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"GetFriendRequests: json data: \", json);\n      setState({\n        requests: json,\n        loading: false\n      });\n    });\n  }, []);\n  return state;\n};\n\n_s4(GetFriendRequests, \"NoyGX1EfMw9acrAEmIZIHQLZ3Ss=\");\n\n_c6 = GetFriendRequests;\nexport const GetWithFilter = (filterSender, filterReceiver) => {\n  _s5();\n\n  const url = 'http://localhost:5000/getwithfilter';\n  const [state, setState] = useState({\n    messages: null,\n    loading: true\n  });\n  useEffect(() => {\n    var bodyContent = {\n      sender: filterSender,\n      receiver: filterReceiver\n    };\n    setState(state => ({\n      messages: state.messages,\n      loading: true\n    }));\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"GetWithFilter: json data: \", json);\n      setState({\n        messages: json,\n        loading: false\n      });\n    });\n  }, [filterReceiver, filterSender]);\n  return state;\n};\n\n_s5(GetWithFilter, \"5L59oO1RyW/oVS54yvmMosxLZxk=\");\n\n_c7 = GetWithFilter;\nexport const AddFriend = (userContent, newFriendContent) => {\n  const url = 'http://192.168.0.16:5000/addfriend'; // var jsonData\n\n  var bodyContent = {\n    name: userContent,\n    newFriend: newFriendContent\n  };\n  console.log(\"AddFriend: \", bodyContent);\n  fetch(url, {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(json => {\n    console.log(\"AddFriend: \", json);\n    return json;\n  });\n};\n_c8 = AddFriend;\nexport const AddFriendRequest = (userContent, newFriendContent) => {\n  const url = 'http://192.168.0.16:5000/addfriendrequest'; // var jsonData\n\n  var bodyContent = {\n    name: userContent,\n    newFriend: newFriendContent\n  };\n  console.log(\"AddFriendRequest: \", bodyContent);\n  fetch(url, {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(json => {\n    console.log(\"AddFriendRequest: \", json);\n    return json;\n  });\n};\n_c9 = AddFriendRequest;\nexport const RemoveFriendRequest = (user, friendToRemove) => {\n  const url = 'http://192.168.0.16:5000/removefriendrequest'; // var jsonData\n\n  var bodyContent = {\n    name: user,\n    FriendToRemove: friendToRemove\n  };\n  console.log(\"RemoveFriendRequest: \", bodyContent);\n  fetch(url, {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(json => {\n    console.log(\"RemoveFriendRequest: \", json);\n    return json;\n  });\n};\n_c10 = RemoveFriendRequest;\nexport const AddUser = (username, password) => {\n  // TODO: Maybe this doesnt work without capital letters. Test it\n  const url = 'http://192.168.0.16:5000/adduser';\n  var bodyContent = {\n    name: username,\n    pass: password,\n    friends: [],\n    friendRequests: [],\n    profileImage: \"\"\n  };\n  console.log(\"AddUser: bodyContent: \", bodyContent);\n  fetch(url, {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n    console.log(\"AddUser: \", json);\n    return json;\n  });\n};\n_c11 = AddUser;\nexport const GetFriends = (user, friendAdded) => {\n  _s6();\n\n  const url = 'http://192.168.0.16:5000/getfriends';\n  const [state, setState] = useState({\n    friends: null\n  });\n  useEffect(() => {\n    var bodyContent = {\n      name: user\n    };\n    setState(state => ({\n      data: state.data\n    }));\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"GetFriends: \", json);\n      setState({\n        friends: json\n      });\n    });\n  }, [user, friendAdded]);\n  return state;\n};\n\n_s6(GetFriends, \"OkInLZesYyfSaTbHkIMZ9R4ew5g=\");\n\n_c12 = GetFriends;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n\n$RefreshReg$(_c, \"PostRequest\");\n$RefreshReg$(_c2, \"UploadProfileImage\");\n$RefreshReg$(_c3, \"GetProfileImage\");\n$RefreshReg$(_c4, \"UserLogin\");\n$RefreshReg$(_c5, \"DoesUserExist\");\n$RefreshReg$(_c6, \"GetFriendRequests\");\n$RefreshReg$(_c7, \"GetWithFilter\");\n$RefreshReg$(_c8, \"AddFriend\");\n$RefreshReg$(_c9, \"AddFriendRequest\");\n$RefreshReg$(_c10, \"RemoveFriendRequest\");\n$RefreshReg$(_c11, \"AddUser\");\n$RefreshReg$(_c12, \"GetFriends\");","map":{"version":3,"sources":["/home/a/Documents/GitHub/react-ts-project/src/requests.jsx"],"names":["useEffect","useState","url","headersContent","PostRequest","userContent","reciverContent","textContent","console","log","bodyContent","sender","receiver","content","fetch","method","headers","credentials","body","JSON","stringify","then","res","json","resJson","UploadProfileImage","user","image","areaToCrop","name","areatocrop","GetProfileImage","state","setState","picture","loading","data","text","parse","UserLogin","finalUser","finalPassword","successfulLogin","loginLoading","pass","DoesUserExist","newUser","doesUserExist","registerLoading","GetFriendRequests","requests","GetWithFilter","filterSender","filterReceiver","messages","AddFriend","newFriendContent","newFriend","AddFriendRequest","RemoveFriendRequest","friendToRemove","FriendToRemove","AddUser","username","password","friends","friendRequests","profileImage","GetFriends","friendAdded"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\n\nconst url = 'http://192.168.0.16:5000/';\nconst headersContent = {\n  // \"Access-Control-Allow-Credentials\": \"true\",\n  // \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n  // \"Access-Control-Allow-Methods\": \"POST, GET, OPTIONS, DELETE, PUT\",\n  // \"Access-Control-Max-Age\": \"1000\",\n  // \"Access-Control-Allow-Headers\": \"x-requested-with, Content-Type, origin, authorization, accept, client-security-token\",\n  // \"Content-Type\": \"application/json\"\n}\n\nexport const PostRequest = (userContent, reciverContent, textContent) => {\n  console.log(\"This is the texxt content: \" + textContent)\n  var bodyContent = {\n    sender: userContent,\n    receiver: reciverContent,\n    content: textContent\n  }\n  fetch(url + \"addmessage\", {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(res => res.json()).then(resJson => {\n    console.log(\"PostRequest: \", resJson)\n    return resJson\n  })\n}\n\nexport const UploadProfileImage = (user, image, areaToCrop) => {\n  const bodyContent = {\n    name: user,\n    image: image,\n      areatocrop : areaToCrop\n  }\n  console.log(\"UploadProfileImage\", bodyContent)\n  fetch(url + \"uploadprofileimage\", {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(res => res.json()).then(resJson => {\n    console.log(\"PostRequest: \", resJson)\n    return resJson\n  })\n}\n\nexport const GetProfileImage = (user) => {\n  const [state, setState] = useState({picture: null, loading: true})\n  useEffect(() => {\n    var bodyContent = {\n      name: user\n    }\n    console.log(\"GetProfileImage: bodyContent: \", bodyContent)\n    setState(state => ({picture: state.picture, loading: true}))\n    fetch(url + \"getprofileimage\", {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"GetProfileImage: json data: \", json)\n      setState({picture: json, loading: false})\n    })\n  }, [user])\n  return state\n}\n\nexport const UserLogin = (finalUser, finalPassword) => {\n  const [state, setState] = useState({successfulLogin: null, loginLoading: true})\n  const url = 'http://192.168.0.16:5000/login';\n  useEffect(() => {\n    var bodyContent = {\n      name: finalUser,\n      pass: finalPassword\n    }\n    console.log(\"Login: bodyContent: \", bodyContent)\n    setState(state => ({successfulLogin: state.successfulLogin, loginLoading: true}))\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"UserLogin: json data\", json)\n      if (json != null) {\n        console.log(\"UserLogin: json set\")\n        setState({successfulLogin: json, loginLoading: false})\n      }\n    })\n  }, [finalPassword])\n  return state\n}\n\nexport const DoesUserExist = (newUser) => {\n  const url = 'http://192.168.0.16:5000/doesuserexist';\n  const [state, setState] = useState({doesUserExist: null, registerLoading: true})\n  useEffect(() => {\n    var bodyContent = {\n      name: newUser\n    }\n    console.log(\"DoesUserExist: bodyContent: \", bodyContent, newUser)\n    setState(state => ({doesUserExist: state.doesUserExist, registerLoading: true}))\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"DoesUserExist: json data\", json, newUser)\n      setState({doesUserExist: json, registerLoading: false})\n    })\n  }, [newUser])\n  return state\n}\n\nexport const GetFriendRequests = (user) => {\n  const url = 'http://localhost:5000/getfriendrequests';\n  const [state, setState] = useState({requests: null, loading: true})\n  useEffect(() => {\n    var bodyContent = {\n      name: user\n    }\n    console.log(\"GetFriendRequests: bodyContent: \", bodyContent)\n    setState(state => ({requests: state.requests, loading: true}))\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"GetFriendRequests: json data: \", json)\n      setState({requests: json, loading: false})\n    })\n  }, [])\n  return state\n}\n\nexport const GetWithFilter = (filterSender, filterReceiver) => {\n  const url = 'http://localhost:5000/getwithfilter';\n  const [state, setState] = useState({messages: null, loading: true})\n  useEffect(() => {\n    var bodyContent = {\n      sender: filterSender,\n      receiver: filterReceiver\n    }\n    setState(state => ({messages: state.messages, loading: true}))\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"GetWithFilter: json data: \", json)\n      setState({messages: json, loading: false})\n    })\n  }, [filterReceiver, filterSender])\n  return state\n}\n\n\nexport const AddFriend = (userContent, newFriendContent) => {\n  const url = 'http://192.168.0.16:5000/addfriend';\n  // var jsonData\n  var bodyContent = {\n    name: userContent,\n    newFriend: newFriendContent\n  }\n\n  console.log(\"AddFriend: \", bodyContent)\n  fetch(url, {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(json => {\n    console.log(\"AddFriend: \", json)\n    return json\n  })\n}\n\nexport const AddFriendRequest = (userContent, newFriendContent) => {\n  const url = 'http://192.168.0.16:5000/addfriendrequest';\n  // var jsonData\n  var bodyContent = {\n    name: userContent,\n    newFriend: newFriendContent\n  }\n\n  console.log(\"AddFriendRequest: \", bodyContent)\n  fetch(url, {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(json => {\n    console.log(\"AddFriendRequest: \", json)\n    return json\n  })\n}\n\nexport const RemoveFriendRequest = (user, friendToRemove) => {\n  const url = 'http://192.168.0.16:5000/removefriendrequest';\n  // var jsonData\n  var bodyContent = {\n    name: user,\n    FriendToRemove: friendToRemove\n  }\n\n  console.log(\"RemoveFriendRequest: \", bodyContent)\n  fetch(url, {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(json => {\n    console.log(\"RemoveFriendRequest: \", json)\n    return json\n  })\n}\n\nexport const AddUser = (username, password) => {\n  // TODO: Maybe this doesnt work without capital letters. Test it\n  const url = 'http://192.168.0.16:5000/adduser';\n  var bodyContent = {\n    name: username,\n    pass: password,\n    friends: [],\n    friendRequests: [],\n    profileImage: \"\"\n  }\n  console.log(\"AddUser: bodyContent: \", bodyContent)\n  fetch(url, {\n    method: 'POST',\n    headers: headersContent,\n    credentials: 'same-origin',\n    body: JSON.stringify(bodyContent)\n  }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n    console.log(\"AddUser: \", json)\n    return json\n  })\n}\n\nexport const GetFriends = (user, friendAdded) => {\n  const url = 'http://192.168.0.16:5000/getfriends';\n  const [state, setState] = useState({friends: null})\n\n  useEffect(() => {\n    var bodyContent = {\n      name: user\n    }\n    setState(state => ({data: state.data}))\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"GetFriends: \", json)\n      setState({friends: json})\n    })\n  }, [user, friendAdded])\n\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}