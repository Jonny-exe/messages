{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/a/Documents/GitHub/react-ts-proyect/src/LoginInputs.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { DoesUserExist } from './requests.jsx';\n\nconst LoginInputs = props => {\n  _s();\n\n  const [storeUser, setStoreUser] = useState(localStorage.getItem(\"user\"));\n  const [finalUser, setFinalUser] = useState(\"\");\n  const [userExists, setUserExists] = useState(\"\");\n  const [send, setSend] = useState(0);\n\n  const handleInput = event => {\n    setStoreUser(event.target.value);\n  };\n\n  var {\n    DoesExist\n  } = DoesUserExist(storeUser, finalUser); // TODO: this doesnt work\n\n  const sendInput = () => {\n    // console.log(\"LoginInputs: newuser \" + storeUser)\n    // console.log(\"LoginInputs: send: \", send)\n    // let newSend = send + 1\n    // console.log(\"LoginInputs: newSend: \", newSend)\n    // setSend(newSend)\n    // console.log(\"LoginInputs: send: \", send)\n    setFinalUser(storeUser);\n\n    if (DoesExist) {\n      console.log(\"LoginInputs: SendInput: data \", DoesExist);\n      props.saveUser(storeUser);\n      props.setAlreadySet();\n      DoesExist = false;\n    }\n  };\n\n  const url = 'http://192.168.0.16:5000/doesuserexist';\n  const [state, setState] = useState({\n    DoesExist: null,\n    loading: true\n  });\n  useEffect(() => {\n    var bodyContent = {\n      name: finalUser\n    };\n    console.log(\"DoesUserExist: bodyContent: \", bodyContent, finalUser, newUser);\n    setState(state => ({\n      data: state.data,\n      loading: true\n    }));\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"DoesUserExist: json data\", json, finalUser);\n      setState({\n        DoesExist: json,\n        loading: false\n      });\n    });\n  }, [finalUser]);\n  return state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logins\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: handleInput,\n      className: \"loginInputs\",\n      placeholder: \"Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: sendInput,\n      className: \"loginInputs\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" \", userExists, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginInputs, \"aw2zt+GshvI90QcZq0bze8CO81Q=\");\n\n_c = LoginInputs;\nexport default LoginInputs;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginInputs\");","map":{"version":3,"sources":["/home/a/Documents/GitHub/react-ts-proyect/src/LoginInputs.tsx"],"names":["React","useState","DoesUserExist","LoginInputs","props","storeUser","setStoreUser","localStorage","getItem","finalUser","setFinalUser","userExists","setUserExists","send","setSend","handleInput","event","target","value","DoesExist","sendInput","console","log","saveUser","setAlreadySet","url","state","setState","loading","useEffect","bodyContent","name","newUser","data","fetch","method","headers","headersContent","credentials","body","JSON","stringify","then","text","parse","json"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { DoesUserExist } from './requests.jsx'\n\nconst LoginInputs = (props: any) => {\n  const [storeUser, setStoreUser] = useState(localStorage.getItem(\"user\"))\n  const [finalUser, setFinalUser] = useState(\"\")\n  const [userExists, setUserExists] = useState(\"\")\n  const [send, setSend] = useState(0)\n  const handleInput = (event: any) => {\n    setStoreUser(event.target.value)\n  }\n  var { DoesExist } = DoesUserExist(storeUser, finalUser)\n  // TODO: this doesnt work\n  const sendInput = () => {\n    // console.log(\"LoginInputs: newuser \" + storeUser)\n    // console.log(\"LoginInputs: send: \", send)\n    // let newSend = send + 1\n    // console.log(\"LoginInputs: newSend: \", newSend)\n    // setSend(newSend)\n    // console.log(\"LoginInputs: send: \", send)\n    setFinalUser(storeUser)\n    if (DoesExist) {\n      console.log(\"LoginInputs: SendInput: data \", DoesExist)\n      props.saveUser(storeUser)\n      props.setAlreadySet()\n      DoesExist = false\n    }\n  }\n\n\n\n  const url = 'http://192.168.0.16:5000/doesuserexist';\n  const [state, setState] = useState({DoesExist: null, loading: true})\n  useEffect(() => {\n    var bodyContent = {\n      name: finalUser\n    }\n    console.log(\"DoesUserExist: bodyContent: \", bodyContent, finalUser, newUser)\n    setState(state => ({data: state.data, loading: true}))\n    fetch(url, {\n      method: 'POST',\n      headers: headersContent,\n      credentials: 'same-origin',\n      body: JSON.stringify(bodyContent)\n    }).then(data => data.text()).then(text => JSON.parse(text)).then(json => {\n      console.log(\"DoesUserExist: json data\", json, finalUser)\n      setState({DoesExist: json, loading: false})\n    })\n  }, [finalUser])\n  return state\n\n\n\n  return (\n    <div className=\"logins\">\n      <input type=\"text\" onChange={handleInput} className=\"loginInputs\" placeholder=\"Username\"></input>\n      <button type=\"button\" onClick={sendInput} className=\"loginInputs\">Send</button>\n      <span> {userExists} </span>\n    </div>\n  )\n}\n\nexport default LoginInputs\n"]},"metadata":{},"sourceType":"module"}